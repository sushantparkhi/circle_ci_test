version: '1.0'
stages:
  - prepare
  - release
steps:
  GetGithubToken:
    title: Reading Github token
    image: codefresh/cli
    stage: prepare
    commands:
      - cf_export GITHUB_TOKEN=$(codefresh get context github --decrypt -o yaml | yq -y .spec.data.auth.password)

  SetStatusToPrepareToPending:
    title: Set Prepare Stage to Pending
    image: cloudposse/github-status-updater
    stage: prepare
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Prepare
      - GITHUB_STATE=pending
      - GITHUB_DESCRIPTION=Executing Prepare Stage
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}
  CloneRepo:
    title: Cloning Repository
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    stage: prepare
    git: github
  SetStatusToPrepareToDone:
    title: Set Prepare Stage to Done
    image: cloudposse/github-status-updater
    stage: prepare
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Prepare
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Prepare Stage Successful
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}
    when:
      condition:
        all:
          successCondition: steps.CloneRepo.result == 'success'

  SetStatusToPrepareToError:
    title: Set Prepare Stage to Error
    image: cloudposse/github-status-updater
    stage: prepare
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Prepare
      - GITHUB_STATE=failure
      - GITHUB_DESCRIPTION=Prepare Stage Failed
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}
    when:
      condition:
        any:
          errorCondition: steps.CloneRepo.result == 'error'
          failureCondition: steps.CloneRepo.result == 'failure'

  SetStatusToReleaseToPending:
    title: Set Release Stage to Pending
    image: cloudposse/github-status-updater
    stage: test
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Release
      - GITHUB_STATE=pending
      - GITHUB_DESCRIPTION=Executing Release Stage
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}

  ExecuteRelease:
    title: Execute Release
    stage: release
    working_directory: '${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}'
    image: 'node:latest'
    commands:
      - npm install
      - npx semantic-release

  SetStatusToReleaseToDone:
    title: Set Release Stage to Done
    image: cloudposse/github-status-updater
    stage: test
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Release
      - GITHUB_STATE=success
      - GITHUB_DESCRIPTION=Release Stage Successful
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}
    when:
      condition:
        all:
          successCondition: steps.ExecuteRelease.result == 'success'

  SetStatusToReleaseToError:
    title: Set Release Stage to Error
    image: cloudposse/github-status-updater
    stage: test
    environment:
      - GITHUB_ACTION=update_state
      - GITHUB_TOKEN=${{GITHUB_TOKEN}}
      - GITHUB_OWNER=${{CF_REPO_OWNER}}
      - GITHUB_REPO=${{CF_REPO_NAME}}
      - GITHUB_REF=${{CF_REVISION}}
      - GITHUB_CONTEXT=Release
      - GITHUB_STATE=failure
      - GITHUB_DESCRIPTION=Release Stage Failed
      - GITHUB_TARGET_URL=${{CF_BUILD_URL}}
    when:
      condition:
        any:
          errorCondition: steps.ExecuteRelease.result == 'error'
          failureCondition: steps.ExecuteRelease.result == 'failure'